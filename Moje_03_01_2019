n=7; %lp wierzcholkow
k=5; %aby wyszla 1/5 tych polaczen; co 5 krawedzi tak naprawde bedzie istniala (inaczej kazda by³aby z kazda) 
A=randi(k,n) %od 1 do 5, 7x7

A =

     5     3     5     1     4     5     4
     5     5     1     5     1     4     4
     1     5     3     5     4     2     1
     5     1     5     4     1     5     3
     4     5     4     4     2     1     3
     1     5     5     4     1     3     4
     2     3     4     2     1     2     4

%1 gdzie 5, reszta 0
A1=A==k % I sposob

A1 =

  7×7 <a href="matlab:helpPopup logical" style="font-weight:bold">logical</a> array

   1   0   1   0   0   1   0
   1   1   0   1   0   0   0
   0   1   0   1   0   0   0
   1   0   1   0   0   1   0
   0   1   0   0   0   0   0
   0   1   1   0   0   0   0
   0   0   0   0   0   0   0

A1=~mod(A,k) % II sposob

A1 =

  7×7 <a href="matlab:helpPopup logical" style="font-weight:bold">logical</a> array

   1   0   1   0   0   1   0
   1   1   0   1   0   0   0
   0   1   0   1   0   0   0
   1   0   1   0   0   1   0
   0   1   0   0   0   0   0
   0   1   1   0   0   0   0
   0   0   0   0   0   0   0

%niekoniecznie symetryczna
%czy jest symetryczna czyli rowna sie transponowanej
%A1==A' bad test (nie korzystac)
isequal(A1,A1') %good test

ans =

  <a href="matlab:helpPopup logical" style="font-weight:bold">logical</a>

   0

digraph(A1)%graf skierowany

ans = 

  <a href="matlab:helpPopup digraph" style="font-weight:bold">digraph</a> with properties:

    Edges: [14×1 table]
    Nodes: [7×0 table]

d=ans

d = 

  <a href="matlab:helpPopup digraph" style="font-weight:bold">digraph</a> with properties:

    Edges: [14×1 table]
    Nodes: [7×0 table]

plot(d)
%dodanie wag
A2=A1.*randi(4,size(A1,1)) % zamiast size(A1,1) mo¿na n

A2 =

     4     0     3     0     0     4     0
     2     2     0     2     0     0     0
     0     3     0     4     0     0     0
     3     0     3     0     0     4     0
     0     4     0     0     0     0     0
     0     2     1     0     0     0     0
     0     0     0     0     0     0     0

d2=digraph(A2)

d2 = 

  <a href="matlab:helpPopup digraph" style="font-weight:bold">digraph</a> with properties:

    Edges: [14×2 table]
    Nodes: [7×0 table]

% plot(d2) -> to wygl¹d taki sam! aby zobaczyæ wagi musimy je dodaæ 
plot(d2, 'EdgeLabel', d2.Edges.Weight) %to zadziala, wynik -> graf skierowany z wagami
%graf z 2 pionowych wektorow
%jak wagi to 3 kolumna
%np w 1K - 4 w 2K-5 to sciezka z 4 do 5
x=randi(6,[10,1]) %6 wierzcholkow

x =

     1
     3
     1
     5
     2
     4
     1
     4
     2
     4

y=randi(6,[10,1]) %6 wierzcholkow

y =

     5
     5
     3
     1
     2
     6
     1
     5
     4
     6

d3=digraph(x,y)
{Error using <a href="matlab:matlab.internal.language.introspective.errorDocCallback('matlab.internal.graph.MLDigraph')" style="font-weight:bold">matlab.internal.graph.MLDigraph</a>
Duplicate edges not supported.

Error in <a href="matlab:matlab.internal.language.introspective.errorDocCallback('matlab.internal.graph.constructFromEdgeList', 'F:\matlabT\toolbox\matlab\graphfun\+matlab\+internal\+graph\constructFromEdgeList.m', 125)" style="font-weight:bold">matlab.internal.graph.constructFromEdgeList</a> (<a href="matlab: opentoline('F:\matlabT\toolbox\matlab\graphfun\+matlab\+internal\+graph\constructFromEdgeList.m',125,0)">line 125</a>)
G = underlyingCtor(double(s), double(t), totalNodes);

Error in <a href="matlab:matlab.internal.language.introspective.errorDocCallback('digraph', 'F:\matlabT\toolbox\matlab\graphfun\@digraph\digraph.m', 279)" style="font-weight:bold">digraph</a> (<a href="matlab: opentoline('F:\matlabT\toolbox\matlab\graphfun\@digraph\digraph.m',279,0)">line 279</a>)
                matlab.internal.graph.constructFromEdgeList( ...
} 
% wyrzucil blad, poniewaz np z 1 do 2 i 2 do 1 idzie polaczenie, nalezy utworzyc 1 macierz z 2 wektorow
xy=[x y]

xy =

     1     5
     3     5
     1     3
     5     1
     2     2
     4     6
     1     1
     4     5
     2     4
     4     6

xy1=unique(xy, 'rows')

xy1 =

     1     1
     1     3
     1     5
     2     2
     2     4
     3     5
     4     5
     4     6
     5     1

% Matlab chcial je rozdzielone, dlatego:
d4=digraph(xy1(:,1), xy1(:,2))

d4 = 

  <a href="matlab:helpPopup digraph" style="font-weight:bold">digraph</a> with properties:

    Edges: [9×1 table]
    Nodes: [6×0 table]

%dodac wagi do grafu
w=randi(4,[size(xy1,1),1]) % w - wagi

w =

     1
     2
     1
     4
     1
     4
     4
     4
     1

% poczatkowo byloby [10, 1] ale ze rozmiar sie zmniejszyl dlatego [size(xy1,1), 1]  
d5=digraph(xy1(:,1), xy1(:,2), w) 

d5 = 

  <a href="matlab:helpPopup digraph" style="font-weight:bold">digraph</a> with properties:

    Edges: [9×2 table]
    Nodes: [6×0 table]

dp5=plot(d5, 'EdgeLabel', w)

dp5 = 

  <a href="matlab:helpPopup matlab.graphics.chart.primitive.GraphPlot" style="font-weight:bold">GraphPlot</a> with properties:

     NodeColor: [0 0.4470 0.7410]
    MarkerSize: 4
        Marker: 'o'
     EdgeColor: [0 0.4470 0.7410]
     LineWidth: 0.5000
     LineStyle: '-'
     NodeLabel: {'1'  '2'  '3'  '4'  '5'  '6'}
     EdgeLabel: {'1'  '2'  '1'  '4'  '1'  '4'  '4'  '4'  '1'}
         XData: [-0.9607 0.6496 -1.4898 0.5687 -0.4841 1.7163]
         YData: [-1.4178 1.6698 -0.8448 0.5251 -0.4470 0.5146]
         ZData: [0 0 0 0 0 0]

  Show <a href="matlab:if exist('dp5', 'var'), matlab.graphics.internal.getForDisplay('dp5', dp5, 'matlab.graphics.chart.primitive.GraphPlot'), else, matlab.graphics.internal.getForDisplay('dp5'), end">all properties</a>

% gdyby w nawiasie zamiast d5 bylo d4 to bylyby liczby ale on jakby nie widzial wag
d6=graph(xy1(:,1), xy1(:,2))
{Error using <a href="matlab:matlab.internal.language.introspective.errorDocCallback('matlab.internal.graph.MLGraph')" style="font-weight:bold">matlab.internal.graph.MLGraph</a>
Duplicate edges not supported.

Error in <a href="matlab:matlab.internal.language.introspective.errorDocCallback('matlab.internal.graph.constructFromEdgeList', 'F:\matlabT\toolbox\matlab\graphfun\+matlab\+internal\+graph\constructFromEdgeList.m', 125)" style="font-weight:bold">matlab.internal.graph.constructFromEdgeList</a> (<a href="matlab: opentoline('F:\matlabT\toolbox\matlab\graphfun\+matlab\+internal\+graph\constructFromEdgeList.m',125,0)">line 125</a>)
G = underlyingCtor(double(s), double(t), totalNodes);

Error in <a href="matlab:matlab.internal.language.introspective.errorDocCallback('graph', 'F:\matlabT\toolbox\matlab\graphfun\@graph\graph.m', 293)" style="font-weight:bold">graph</a> (<a href="matlab: opentoline('F:\matlabT\toolbox\matlab\graphfun\@graph\graph.m',293,0)">line 293</a>)
                matlab.internal.graph.constructFromEdgeList(...
} 
%graf nieskierowany
%polaczenie 1 5 i 5 1 by nie poszlo (w grafach neiskierowanych takie sa niedozwolone)
%pozbycie sie tych polaczen
% |4| |5|
% |5| |4|
% ¿eby nie ró¿ni³o siê kolejnoœci¹ to posortowaæ
sort(xy')'

ans =

     1     5
     3     5
     1     3
     1     5
     2     2
     4     6
     1     1
     4     5
     2     4
     4     6

xy2=unique(sort(xy')', 'rows')

xy2 =

     1     1
     1     3
     1     5
     2     2
     2     4
     3     5
     4     5
     4     6

d6=graph(xy2(:,1), xy2(:,2))

d6 = 

  <a href="matlab:helpPopup graph" style="font-weight:bold">graph</a> with properties:

    Edges: [8×1 table]
    Nodes: [6×0 table]

dp6=plot(d6, 'EdgeLabel', w)
{Error using matlab.graphics.chart.primitive.GraphPlot/set.EdgeLabel
Expect EdgeLabel input to have length 8 or to be empty.

Error in matlab.graphics.chart.primitive.GraphPlot

Error in <a href="matlab:matlab.internal.language.introspective.errorDocCallback('graph/plot', 'F:\matlabT\toolbox\matlab\graphfun\@graph\plot.m', 110)" style="font-weight:bold">graph/plot</a> (<a href="matlab: opentoline('F:\matlabT\toolbox\matlab\graphfun\@graph\plot.m',110,0)">line 110</a>)
hObj = matlab.graphics.chart.primitive.GraphPlot('BasicGraph', ...
} 
plot(d6)
d7=graph(xy2(:,1), xy2(:,2), 'OmitSelfLoops') % nie bêdzie pêtelek

d7 = 

  <a href="matlab:helpPopup graph" style="font-weight:bold">graph</a> with properties:

    Edges: [6×1 table]
    Nodes: [6×0 table]

plot(d7)
%szukanie sciezki
x=randi(20,[50,1]) 

x =

     8
     6
    17
     9
    19
     4
     6
     3
     3
    18
    12
    11
     3
    18
    13
     8
    11
     9
     2
     5
     3
     4
     5
     9
     1
    19
    19
    10
    10
     7
    19
     8
     3
    16
     8
     5
     9
     2
     3
    19
    20
    12
     2
     5
     8
    17
     1
     1
     4
    13

y=randi(20,[50,1])

y =

    15
    13
    10
    11
     6
    15
     4
    14
     4
     8
    13
    16
     2
    19
    16
    10
     9
     9
     7
    11
    11
    17
    16
    13
     8
    17
    11
     8
    19
    18
    12
    13
    12
     5
     7
    10
     5
    17
     4
     5
     4
     5
     9
     7
    19
     9
     4
    19
    20
     9

xy=[x y]

xy =

     8    15
     6    13
    17    10
     9    11
    19     6
     4    15
     6     4
     3    14
     3     4
    18     8
    12    13
    11    16
     3     2
    18    19
    13    16
     8    10
    11     9
     9     9
     2     7
     5    11
     3    11
     4    17
     5    16
     9    13
     1     8
    19    17
    19    11
    10     8
    10    19
     7    18
    19    12
     8    13
     3    12
    16     5
     8     7
     5    10
     9     5
     2    17
     3     4
    19     5
    20     4
    12     5
     2     9
     5     7
     8    19
    17     9
     1     4
     1    19
     4    20
    13     9

xy2=unique(sort(xy')', 'rows')

xy2 =

     1     4
     1     8
     1    19
     2     3
     2     7
     2     9
     2    17
     3     4
     3    11
     3    12
     3    14
     4     6
     4    15
     4    17
     4    20
     5     7
     5     9
     5    10
     5    11
     5    12
     5    16
     5    19
     6    13
     6    19
     7     8
     7    18
     8    10
     8    13
     8    15
     8    18
     8    19
     9     9
     9    11
     9    13
     9    17
    10    17
    10    19
    11    16
    11    19
    12    13
    12    19
    13    16
    17    19
    18    19

d6=graph(xy2(:,1), xy2(:,2))

d6 = 

  <a href="matlab:helpPopup graph" style="font-weight:bold">graph</a> with properties:

    Edges: [44×1 table]
    Nodes: [20×0 table]

plot(d6)
%najkrotsza z 15 do 16
[p l]=shortestpath(d6, 15, 16) % jezeli byloby kilka najkrotszych to wybierze jedna

p =

    15     8    13    16


l =

     3

d16=plot(d6)

d16 = 

  <a href="matlab:helpPopup matlab.graphics.chart.primitive.GraphPlot" style="font-weight:bold">GraphPlot</a> with properties:

     NodeColor: [0 0.4470 0.7410]
    MarkerSize: 4
        Marker: 'o'
     EdgeColor: [0 0.4470 0.7410]
     LineWidth: 0.5000
     LineStyle: '-'
     NodeLabel: {'1'  '2'  '3'  '4'  '5'  '6'  '7'  '8'  '9'  '10'  '11'  '12'  '13'  '14'  '15'  '16'  '17'  '18'  '19'  '20'}
     EdgeLabel: {}
         XData: [1×20 double]
         YData: [1×20 double]
         ZData: [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]

  Show <a href="matlab:if exist('d16', 'var'), matlab.graphics.internal.getForDisplay('d16', d16, 'matlab.graphics.chart.primitive.GraphPlot'), else, matlab.graphics.internal.getForDisplay('d16'), end">all properties</a>

%aby moc zmienic np kolor to musi bcy rysunek uruchomiony 
d16=plot(d6)

d16 = 

  <a href="matlab:helpPopup matlab.graphics.chart.primitive.GraphPlot" style="font-weight:bold">GraphPlot</a> with properties:

     NodeColor: [0 0.4470 0.7410]
    MarkerSize: 4
        Marker: 'o'
     EdgeColor: [0 0.4470 0.7410]
     LineWidth: 0.5000
     LineStyle: '-'
     NodeLabel: {'1'  '2'  '3'  '4'  '5'  '6'  '7'  '8'  '9'  '10'  '11'  '12'  '13'  '14'  '15'  '16'  '17'  '18'  '19'  '20'}
     EdgeLabel: {}
         XData: [1×20 double]
         YData: [1×20 double]
         ZData: [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]

  Show <a href="matlab:if exist('d16', 'var'), matlab.graphics.internal.getForDisplay('d16', d16, 'matlab.graphics.chart.primitive.GraphPlot'), else, matlab.graphics.internal.getForDisplay('d16'), end">all properties</a>

highlight(d16, p, 'EdgeColor', 'r')
highlight(d16, p, 'EdgeColor', 'r', 'LineStyle', '--')
highlight(d16, p, 'EdgeColor', 'r', 'LineStyle', '--', 'NodeColor', 'y')
%pamietac! graf od plota! shortestpath w grafie nie ma plota
%minimalne drzewo rozpinajace
sp=minspantree(d6) % to tylko w nieskierowanym (opcjonalnie mozna dodac wierzcholki z ktorych chcmey startowac)

sp = 

  <a href="matlab:helpPopup graph" style="font-weight:bold">graph</a> with properties:

    Edges: [19×1 table]
    Nodes: [20×0 table]

p1=neighbors(d6, 5)

p1 =

     7
     9
    10
    11
    12
    16
    19

% neighbors(jaki graf, jakie wierzcholek)
d16=plot(d6)

d16 = 

  <a href="matlab:helpPopup matlab.graphics.chart.primitive.GraphPlot" style="font-weight:bold">GraphPlot</a> with properties:

     NodeColor: [0 0.4470 0.7410]
    MarkerSize: 4
        Marker: 'o'
     EdgeColor: [0 0.4470 0.7410]
     LineWidth: 0.5000
     LineStyle: '-'
     NodeLabel: {'1'  '2'  '3'  '4'  '5'  '6'  '7'  '8'  '9'  '10'  '11'  '12'  '13'  '14'  '15'  '16'  '17'  '18'  '19'  '20'}
     EdgeLabel: {}
         XData: [1×20 double]
         YData: [1×20 double]
         ZData: [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]

  Show <a href="matlab:if exist('d16', 'var'), matlab.graphics.internal.getForDisplay('d16', d16, 'matlab.graphics.chart.primitive.GraphPlot'), else, matlab.graphics.internal.getForDisplay('d16'), end">all properties</a>

sp=minspantree(d6)

sp = 

  <a href="matlab:helpPopup graph" style="font-weight:bold">graph</a> with properties:

    Edges: [19×1 table]
    Nodes: [20×0 table]

p1=neighbors(d6, 5)

p1 =

     7
     9
    10
    11
    12
    16
    19

plot(sp)
%reczne dodawania wierzcholkow i krawedzi i usuwanie
% addnode - dodaje w
% rmnode - usuwa w
% addedge - dodaje krawedzie
% rmedge - usuwa krawedzie
d61=addnode(d6, 2) % dodamy 2 wierzcholki, czyli ile ich dodac

d61 = 

  <a href="matlab:helpPopup graph" style="font-weight:bold">graph</a> with properties:

    Edges: [44×1 table]
    Nodes: [22×0 table]

plot(d61)
d61=addedge(d61, [22 21 21],[5 7 13])

d61 = 

  <a href="matlab:helpPopup graph" style="font-weight:bold">graph</a> with properties:

    Edges: [47×1 table]
    Nodes: [22×0 table]

plot(d61)
rmnode(d61, 12)
[Warning: Input graph not modified. Use an output argument to return the modified graph.] 
[> In <a href="matlab:matlab.internal.language.introspective.errorDocCallback('graph/rmnode', 'F:\matlabT\toolbox\matlab\graphfun\@graph\rmnode.m', 43)" style="font-weight:bold">graph/rmnode</a> (<a href="matlab: opentoline('F:\matlabT\toolbox\matlab\graphfun\@graph\rmnode.m',43,0)">line 43</a>)] 

ans = 

  <a href="matlab:helpPopup graph" style="font-weight:bold">graph</a> with properties:

    Edges: [43×1 table]
    Nodes: [21×0 table]

plot(d61)
rmedge(d61, [4 20])
[Warning: Input graph not modified. Use an output argument to return the modified graph.] 
[> In <a href="matlab:matlab.internal.language.introspective.errorDocCallback('graph/rmedge', 'F:\matlabT\toolbox\matlab\graphfun\@graph\rmedge.m', 56)" style="font-weight:bold">graph/rmedge</a> (<a href="matlab: opentoline('F:\matlabT\toolbox\matlab\graphfun\@graph\rmedge.m',56,0)">line 56</a>)] 

ans = 

  <a href="matlab:helpPopup graph" style="font-weight:bold">graph</a> with properties:

    Edges: [45×1 table]
    Nodes: [22×0 table]

plot(d61)
diary off
